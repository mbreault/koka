/* 64-bit IEEE floating point numbers. 

Also described as _double_ precision or _binary64_ numbers in the standards.
See also <https://en.wikipedia.org/wiki/Double-precision_floating-point_format>.

*/
module interface std/num/float64
 
//------------------------------
//#kki: import declarations
 
import std/core/types = std/core/types = "";
import std/core/hnd = std/core/hnd = "";
import std/core = std/core = "";
import std/text/parse = std/text/parse = "";
import std/num/int64 = std/num/int64 = "";
 
//------------------------------
//#kki: external imports
 
 
//------------------------------
//#kki: fixity declarations
 
 
//------------------------------
//#kki: local imported aliases
 
 
//------------------------------
//#kki: type declarations
 
 
//------------------------------
//#kki: declarations
 
// The maximum of the absolute values.
pub fun abs-max : (x : std/core/types/float64, y : std/core/types/float64) -> std/core/types/float64;
// The maximum of a list of absolute values.
pub fun abs-max.1 : (xs : (std/core/list :: V -> V)<std/core/types/float64>) -> std/core/types/float64;
// The area hyperbolic cosine of `d`
pub fun acosh : (d : std/core/types/float64) -> std/core/types/float64;
// The area hyperbolic sine of `d`
pub fun asinh : (d : std/core/types/float64) -> std/core/types/float64;
// The area hyperbolic tangent of `d`
pub fun atanh : (d : std/core/types/float64) -> std/core/types/float64;
// Low-level: return the bits of a 64-bit `:float64` as in `:int64`
pub fun float64-to-bits : (d : std/core/types/float64) -> std/core/types/int64;
// Smallest positive normalized float64 value
pub val flt-min : std/core/types/float64;
// &pi;
pub val pi : std/core/types/float64;
// Extend a `:float32` to a `:float64`
pub fun float64 : (f : std/core/types/float32) -> std/core/types/float64;
// Low-level: create a `:float64` from the given 64-bit integer. 
pub fun float64-from-bits : (i : std/core/types/int64) -> std/core/types/float64;
fun make-neginf : () -> std/core/types/float64;
val one-m1022 : std/core/types/float64;
val one-p1023 : std/core/types/float64;
fun make-posinf : () -> std/core/types/float64;
// The natural logarithm of 2
pub val flt-ln2 : std/core/types/float64;
// Round a `:float64` to a `:float32`
pub fun float32 : (f : std/core/types/float64) -> std/core/types/float32;
// Return the 'floored' fraction of `d`, always greater or equal to zero.\
// `d.floor + d.ffraction === d`\
// `(-2.4).ffraction === 0.6`
pub fun ffraction : (d : std/core/types/float64) -> std/core/types/float64;
// The [_e_](https://en.wikipedia.org/wiki/E_(mathematical_constant)) constant.
pub val flt-e : std/core/types/float64;
// Machine epsilon: the difference between 1.0 and the next representable `:float64` value.
pub val flt-epsilon : std/core/types/float64;
// [Euler's constant](https://en.wikipedia.org/wiki/Euler%E2%80%93Mascheroni_constant)
pub val flt-euler : std/core/types/float64;
// The natural logarithm of 10
pub val flt-ln10 : std/core/types/float64;
// The base-10 logarithm of _e_.
pub val flt-log10e : std/core/types/float64;
// The base-2 logarithm of _e_.
pub val flt-log2e : std/core/types/float64;
// Maximum float64 value
pub val flt-max : std/core/types/float64;
// maximal precision in decimal digits of a `:float64`.
pub val flt-max-prec : std/core/types/int;
// &pi;/2
pub val flt-pi2 : std/core/types/float64;
// 3&pi;/4
pub val flt-pi34 : std/core/types/float64;
// &pi;/4
pub val flt-pi4 : std/core/types/float64;
// `1.0 / sqrt(2.0)`  (= `sqrt(0.5)`)
pub val flt-sqrt12 : std/core/types/float64;
// The square-root of 2
pub val flt-sqrt2 : std/core/types/float64;
// Smallest positive subnormal value (i.e. [``DBL_TRUE_MIN``](http://en.cppreference.com/w/cpp/types/climits))
pub val flt-true-min : std/core/types/float64;
// 2&pi;
pub val flt-twopi : std/core/types/float64;
// fused multiply-add. Computes `(x*y)+z` as if to infinite precision
// with only the final result rounded back to a `:float64`.
pub fun fmadd : (x : std/core/types/float64, y : std/core/types/float64, z : std/core/types/float64) -> std/core/types/float64;
// Return the integral part of a `:float64` `d` .
// If `d >= 0.0` , return the largest integer equal or less to `d` ,
// If `d < 0.0` , return the smallest integer equal or larger to `d` .
pub fun truncate : (d : std/core/types/float64) -> std/core/types/float64;
// Is this a negative zero value?
pub fun is-negzero : (d : std/core/types/float64) -> std/core/types/bool;
// The square of a float64
pub fun sqr : (x : std/core/types/float64) -> std/core/types/float64;
// Return the sum of a list of floats.
// Uses [Kahan-Babu&scaron;kan-Neumaier summation](https://en.wikipedia.org/wiki/Kahan_summation_algorithm#Further_enhancements)
// to minimize rounding errors. This
// is more precise as Kahan summation and about as fast.\
// `[1.0e3,1.0e97,1.0e3,-1.0e97].sum == 2000.0`\
// A. Neumaier, _Rundungsfehleranalyse einiger Verfahren zur Summation endlicher Summen_.
// Math. Mechanik, 54:39--51, 1974.
pub fun sum : (xs : (std/core/list :: V -> V)<std/core/types/float64>) -> std/core/types/float64;
// Is this value equal to negative or positive infinity ?
pub fun is-inf : (d : std/core/types/float64) -> std/core/types/bool;
// Return the logarithm in base `base` of a `:float64` `f`
pub fun log : (f : std/core/types/float64, base : std/core/types/float64) -> std/core/types/float64;
fun make-nan : () -> std/core/types/float64;
// Return `nan` on failure
fun prim-parse-float64 : (s : std/core/types/string) -> std/core/types/float64;
// Return `x` with the sign of `y`.
pub fun with-sign-of : (x : std/core/types/float64, y : std/core/types/float64) -> std/core/types/float64;
// Compare floats using a total ordering on the `:float64`.
// The ordering follows the `totalOrder` predicate as defined in IEEE 754-2008 exactly.
// The values are ordered in following order:
// - negative quiet nan
// - negative signaling nan
// - `neginf`
// - -finite
// - -0.0
// - +0.0
// - finite
// - `posinf`
// - signaling nan
// - quiet nan
//
pub fun compare : (x : std/core/types/float64, y : std/core/types/float64) -> std/core/types/order;
// decode a normalized float64 (i.e. not subnormal)
fun decode-normalized : (d : std/core/types/float64, e-adjust : (std/core/types/optional :: V -> V)<std/core/types/int>) -> (std/core/types/int, std/core/types/int);
// Is this a [subnormal](https://en.wikipedia.org/wiki/Denormal_number) value?
// (i.e. `0 < d.abs < flt-min`)
pub fun is-subnormal : (d : std/core/types/float64) -> std/core/types/bool;
// Decode a float64 `d` into a tuple `(m,e)` of a mantissa `m` and exponent `e`
// such that `m`&middot;2^`e`^ =  `d` exactly. The mantissa `m` is
// always either 0 or in the range [2^52^, 2^53^). See also `frexp`.
pub fun decode : (d : std/core/types/float64) -> (std/core/types/int, std/core/types/int);
val rad2deg : std/core/types/float64;
// Convert radians to degrees.
pub fun deg : (rad : std/core/types/float64) -> std/core/types/float64;
val deg2rad : std/core/types/float64;
// Calculate 2&middot;^`e`^ for an integer `e`.
// Uses efficient bit conversion for exponents between  -1022 and 1023 and
// otherwise falls back to the regular `exp2` function converting `e` to a float64.
pub fun exp2.1 : (e : std/core/types/int) -> std/core/types/float64;
fun mul-exp2 : (x : std/core/types/float64, e : std/core/types/int) -> std/core/types/float64;
// Negative infinity
pub val neginf : std/core/types/float64;
// Positive infinity
pub val posinf : std/core/types/float64;
// 'Load exponent': returns `x`&middot;2^`e`^ for a `is-finite` `x` and
// otherwise `x` itself. See also `encode` which loads an integer mantissa.
pub fun ldexp : (x : std/core/types/float64, e : std/core/types/int) -> std/core/types/float64;
// Create a float64 `d` given a mantissa `man` and exponent `exp`
// such that `man`&middot;2^`exp`^ =  `d` exactly (if it is representable
// by a `:float64`). See also `ldexp`.
pub fun encode : (man : std/core/types/int, exp : std/core/types/int) -> std/core/types/float64;
fun exp2m1 : (x : std/core/types/float64) -> std/core/types/float64;
// Short version of `float32` for convenience, e.g. `1.337.f32`. For example:
// ```
// > 1.337.show-hex ++ " != " ++ 1.337.f32.float64.show-hex
// "0x1.5645A1CAC0831p+0 != 0x1.5645A2p+0"
// ```
pub fun f32 : (f : std/core/types/float64) -> std/core/types/float32;
// &pi;
pub val flt-pi : std/core/types/float64;
// Return the fractional part of a `:float64` `d`.\
// `d.truncate + d.fraction === d`\
// `(-2.4).fraction === -0.4`
pub fun fraction : (d : std/core/types/float64) -> std/core/types/float64;
// 'Fraction/exponent': return the normalized fraction `f` and exponent `exp`
// for a number `x` such that `x == f`&middot;2^`exp`^.
// The absolute value of the fraction `f` is always in the range [0.5, 1.0), or
// one of `0.0`, `-0.0`, `neginf`, `posinf`, or `nan`.
// See also `decode` which  decodes to an integer mantissa.
pub fun frexp : (x : std/core/types/float64) -> (std/core/types/float64, std/core/types/int);
// The hypotenuse of `x` and `y`: `sqrt(x*x + y*y)`.
// Prevents overflow for large numbers.
pub fun hypot : (x : std/core/types/float64, y : std/core/types/float64) -> std/core/types/float64;
// The square root of the sum of the squares of three floats.
// Prevents overflow for large numbers.
pub fun hypot.1 : (x : std/core/types/float64, y : std/core/types/float64, z : std/core/types/float64) -> std/core/types/float64;
// The square root of the sum of squares of a list of floats.
// Prevents overflow for large numbers and uses Kahan-Babu&scaron;kan-Neumaier summation
// for precision.
pub fun hypot.2 : (xs : (std/core/list :: V -> V)<std/core/types/float64>) -> std/core/types/float64;
// Returns `ln(exp(x) + exp(y))`.
// Avoids overlow/underflow errors.
pub fun lnaddexp : (x : std/core/types/float64, y : std/core/types/float64) -> std/core/types/float64;
fun log2p1 : (x : std/core/types/float64) -> std/core/types/float64;
// Returns `log2( exp2(x) + exp2(y) )`.
// Avoids overlow/underflow errors.
pub fun logaddexp2 : (x : std/core/types/float64, y : std/core/types/float64) -> std/core/types/float64;
// Represents a value that is _not a number_ (NaN)
pub val nan : std/core/types/float64;
// Return if two floats are nearly equal with respect to some `epsilon` (=`8*flt-epsilon`).
// The epsilon is the nearest difference for numbers around 1.0. The routine automatically
// scales the epsilon for larger and smaller numbers, and for subnormal numbers.
pub fun nearly-eq : (x : std/core/types/float64, y : std/core/types/float64, epsilon : (std/core/types/optional :: V -> V)<std/core/types/float64>) -> std/core/types/bool;
// Returns the greatest `:float64` less than `x`.
// This behaves exactly as `nextDown` in the IEEE 754-2008 standard.
// The identity `x.next-down == ~next-down(~x)` holds for all `x`. 
// When `x` is finite `x == x.next-down.next-up` also holds.
pub fun next-down : (x : std/core/types/float64) -> std/core/types/float64;
// Returns the least `:float64` greater than `x`.
// This behaves exactly as `nextUp` in the IEEE 754-2008 standard.
// The identity `x.next-up == ~next-down(~x)` holds for all `x`. 
// When `x` is finite `x == x.next-up.next-down` also holds.
pub fun next-up : (x : std/core/types/float64) -> std/core/types/float64;
// monadic lift
fun .mlift4090-pdecdouble : (wild_0 : std/core/types/char) -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/int;
// monadic lift
fun .mlift4091-pdecdouble : (cur : std/core/sslice, exp : std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/float64;
// monadic lift
fun .mlift4092-pdecdouble : (wild_ : std/core/types/char) -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/string;
// monadic lift
fun .mlift4093-pdecdouble : (cur : std/core/sslice, .y.4054 : std/core/types/string) -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/float64;
// monadic lift
fun .mlift4094-pdecdouble : (cur : std/core/sslice, man : std/core/types/string) -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/float64;
// monadic lift
fun .mlift4095-pdecdouble : (cur : std/core/sslice) -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/float64;
fun pdecdouble : () -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/float64;
// monadic lift
fun .mlift4096-phexdouble : (wild_2 : std/core/types/char) -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/int;
// monadic lift
fun .mlift4097-phexdouble : (frac : std/core/types/string, man : std/core/types/string, exp : std/core/types/int) -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/float64;
// monadic lift
fun .mlift4098-phexdouble : (wild_1 : std/core/types/char) -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/string;
// monadic lift
fun .mlift4099-phexdouble : (man : std/core/types/string, .y.4063 : std/core/types/string) -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/float64;
// monadic lift
fun .mlift4100-phexdouble : (man : std/core/types/string) -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/float64;
// monadic lift
fun .mlift4101-phexdouble : (wild_0 : std/core/types/char) -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/float64;
// monadic lift
fun .mlift4102-phexdouble : (wild_ : std/core/types/char) -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/float64;
fun phexdouble : () -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/float64;
// monadic lift
fun .mlift4103-pspecial : (wild_ : std/core/types/string) -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/float64;
// monadic lift
fun .mlift4104-pspecial : (wild_0 : std/core/types/string) -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/float64;
// monadic lift
fun .mlift4105-pspecial : (wild_1 : std/core/types/string) -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/float64;
fun pspecial : () -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/float64;
// monadic lift
fun .mlift4106-pdouble : (wild_ : std/core/types/string) -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/float64;
// monadic lift
fun .mlift4107-pdouble : (wild_0 : std/core/types/string) -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/float64;
// monadic lift
fun .mlift4108-pdouble : (wild_1 : std/core/types/string) -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/float64;
// monadic lift
fun .mlift4109-pdouble : (neg : std/core/types/bool, d : std/core/types/float64) -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/float64;
// monadic lift
fun .mlift4110-pdouble : (neg : std/core/types/bool) -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/float64;
pub fun pdouble : () -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/float64;
// monadic lift
fun .mlift4111-parse-float64 : (x : std/core/types/float64, wild_ : ()) -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/float64;
// monadic lift
fun .mlift4112-parse-float64 : (x : std/core/types/float64) -> <(std/core/types/handled :: HX -> X)<(std/text/parse/parse :: HX)>> std/core/types/float64;
// Parse a float64 number. Can be "NaN", "Inf(inity)" (case-insensitive),
// a fix-point number (`1.2`) or in scientific notation (`-2.3e-5`).
// Also allows floats in [hexadecimal notation](https://books.google.com/books?id=FgMsCwAAQBAJ&pg=PA41) (`0xA.Fp-10`) that can
// be represented precisely (and are the preferred _round trip_ format).
pub fun parse-float64 : (s : std/core/types/string) -> (std/core/types/maybe :: V -> V)<std/core/types/float64>;
// Convert degrees to radians.
pub fun rad : (deg : std/core/types/float64) -> std/core/types/float64;
// Round a float64 to a specified precision. Rounds to the  even number in case of a tie.\
// `123.456.round-to-prec(2) == 123.46`\
// `123.456.round-to-prec(-1) == 120.0`\
pub fun round-to-prec : (d : std/core/types/float64, prec : std/core/types/int) -> std/core/types/float64;
/* Show a float64 in [hexadecimal notation](https://books.google.com/books?id=FgMsCwAAQBAJ&pg=PA41).
An advantage of this format is that it precisely represents the `:float64` and can
reliably (and efficiently) be parsed back, i.e. `d.show-hex.parse-float64 == Just(d)`.
The significant is the _hexadecimal_ fraction while the
exponent after the `p` is the _decimal_ power of 2.
 For example, ``0xA.Fp-10`` = (10 + 15/16)&middot;2^-10^  (not 2^-16^!) = 0.01068115234375.
 Equivalently, ``0xA.Fp-10 == 0x5.78p-9 == 0x2.BCp-8 == 0x1.5Ep-7``.
```
> flt-min.show-hex
"0x1.0p-1022"
> 0.1.show-hex
"0x1.999999999999Ap-4"
> flt-max.show-hex
"0x1.FFFFFFFFFFFFFp+1023"
> -0.0.show-hex
"-0x0.0p+0"
> nan.show-hex
"NaN"
> 0.01068115234375.show-hex
"0x1.5Ep-7"
```
.
*/
pub fun show-hex : (d : std/core/types/float64, width : (std/core/types/optional :: V -> V)<std/core/types/int>, use-capitals : (std/core/types/optional :: V -> V)<std/core/types/bool>, pre : (std/core/types/optional :: V -> V)<std/core/types/string>) -> std/core/types/string;
// Return if two floats are nearly equal with respect to an `epsilon` of `8*flt-epsilon`.
// See also `nearly-eq` which takes an explicit `epsilon`.
pub fun (~=) : (x : std/core/types/float64, y : std/core/types/float64) -> std/core/types/bool;
 
//------------------------------
//#kki: external declarations
 
// Is this value equal to NaN ?
pub extern is-nan : (d : std/core/types/float64) -> std/core/types/bool {
  c inline "isnan(#1)";
  cs inline "double.IsNaN(#1)";
  js inline "isNaN(#1)";
};
// Is this value equal to positive infinity ?
pub extern is-posinf : (d : std/core/types/float64) -> std/core/types/bool {
  c inline "(isinf(#1) && !signbit(#1))";
  cs inline "double.IsPositiveInfinity(#1)";
  js inline "((#1) === Infinity)";
};
// Is this value equal to negative infinity ?
pub extern is-neginf : (d : std/core/types/float64) -> std/core/types/bool {
  c inline "(isinf(#1) && signbit(#1))";
  cs inline "double.IsNegativeInfinity(#1)";
  js inline "((#1) === -Infinity)";
};
// Is this a finite number (i.e. not `nan` or infinity)
pub extern is-finite : (d : std/core/types/float64) -> std/core/types/bool {
  c inline "isfinite(#1)";
  cs inline "(!double.IsNaN(#1) && !double.IsInfinity(#1))";
  js inline "isFinite(#1)";
};
// Round a float64 to its nearest integral value.
// If the value is halfway between two integers, the value is rounded towards the even one.
pub extern round : (d : std/core/types/float64) -> std/core/types/float64 {
  c inline "kk_double_round_even(#1,kk_context())";
  cs inline "Math.Round(#1,MidpointRounding.ToEven)";
  js inline "$std_core._double_round_even(#1)";
};
// Return the largest integer equal or less than `d`
pub extern floor : (d : std/core/types/float64) -> std/core/types/float64 {
  c inline "floor(#1)";
  cs inline "Math.Floor(#1)";
  js inline "Math.floor(#1)";
};
// Return the smallest integer equal or larger than `d`
pub extern ceiling : (d : std/core/types/float64) -> std/core/types/float64 {
  c inline "ceil(#1)";
  cs inline "Math.Ceiling(#1)";
  js inline "Math.ceil(#1)";
};
// Return the square root of a value `d`
// Returns `nan` if `d == nan`  or if `d`  is negative.
// Returns `inf` if `d == inf` .
pub extern sqrt : (d : std/core/types/float64) -> std/core/types/float64 {
  c inline "sqrt(#1)";
  cs inline "Math.Sqrt(#1)";
  js inline "Math.sqrt(#1)";
};
// Return the cubic root of a value `d`
// Returns `nan` if `d == nan`  or if `d`  is negative.
// Returns `inf` if `d == inf` .
pub extern cbrt : (d : std/core/types/float64) -> std/core/types/float64 {
  c inline "cbrt(#1)";
  cs inline "Math.Cbrt(#1)";
  js inline "Math.cbrt(#1)";
};
// Return the `d` raised to the power of `p`.
pub extern pow : (d : std/core/types/float64, p : std/core/types/float64) -> std/core/types/float64 {
  c inline "pow(#1,#2)";
  cs inline "Math.Pow(#1,#2)";
  js inline "Math.pow(#1,#2)";
};
// Return the natural logarithm (in base _e_)  of a `:float64` `f`
pub extern ln : (f : std/core/types/float64) -> std/core/types/float64 {
  c inline "log(#1)";
  cs inline "Math.Log(#1)";
  js inline "Math.log(#1)";
};
// Return the logarithm in base 10 of a `:float64` `f`.
pub extern log10 : (f : std/core/types/float64) -> std/core/types/float64 {
  c inline "log10(#1)";
  cs inline "Math.Log10(#1)";
  js inline "Math.log10(#1)";
};
// Return the logarithm in base 2 of a `:float64` `f`.
pub extern log2 : (f : std/core/types/float64) -> std/core/types/float64 {
  c inline "log2(#1)";
  cs inline "Math.Log2(#1)";
  js inline "Math.log2(#1)";
};
// Return _e_ to the power of `p`.
pub extern exp : (p : std/core/types/float64) -> std/core/types/float64 {
  c inline "exp(#1)";
  cs inline "Math.Exp(#1)";
  js inline "Math.exp(#1)";
};
// Return the 10 to the power of `p`.
pub extern exp10 : (p : std/core/types/float64) -> std/core/types/float64 {
  c inline "pow(10.0,#1)";
  cs inline "Math.Pow(10.0,#1)";
  js inline "Math.pow(10.0,#1)";
};
// Return the 2 to the power of `p`.
pub extern exp2 : (p : std/core/types/float64) -> std/core/types/float64 {
  c inline "exp2(#1)";
  cs inline "Math.Pow(2.0,#1)";
  js inline "Math.pow(2.0,#1)";
};
// Return the sine of an angle in radians `d`.
pub extern sin : (d : std/core/types/float64) -> std/core/types/float64 {
  c inline "sin(#1)";
  cs inline "Math.Sin(#1)";
  js inline "Math.sin(#1)";
};
// Return the cosine of an angle in radians `d`.
pub extern cos : (d : std/core/types/float64) -> std/core/types/float64 {
  c inline "cos(#1)";
  cs inline "Math.Cos(#1)";
  js inline "Math.cos(#1)";
};
// Return the tangent of an angle in radians `d`.
pub extern tan : (d : std/core/types/float64) -> std/core/types/float64 {
  c inline "tan(#1)";
  cs inline "Math.Tan(#1)";
  js inline "Math.tan(#1)";
};
// Return the arc-tangent of `d`
pub extern atan : (d : std/core/types/float64) -> std/core/types/float64 {
  c inline "atan(#1)";
  cs inline "Math.Atan(#1)";
  js inline "Math.atan(#1)";
};
// Return the arc-tangent of a point (`x`,`y`).
pub extern atan2 : (x : std/core/types/float64, y : std/core/types/float64) -> std/core/types/float64 {
  c inline "atan2(#1,#2)";
  cs inline "Math.Atan2(#1,#2)";
  js inline "Math.atan2(#1,#2)";
};
// Return the arc-cosine of `d`
pub extern acos : (d : std/core/types/float64) -> std/core/types/float64 {
  c inline "acos(#1)";
  cs inline "Math.Acos(#1)";
  js inline "Math.acos(#1)";
};
// Return the arc-sine of `d`
pub extern asin : (d : std/core/types/float64) -> std/core/types/float64 {
  c inline "asin(#1)";
  cs inline "Math.Asin(#1)";
  js inline "Math.asin(#1)";
};
// The hyperbolic tangent of `d`
pub extern tanh : (d : std/core/types/float64) -> std/core/types/float64 {
  c inline "tanh(#1)";
  cs inline "Math.Tanh(#1)";
  js inline "Math.tanh(#1)";
};
// The hyperbolic cosine of `d`
pub extern cosh : (d : std/core/types/float64) -> std/core/types/float64 {
  c inline "cosh(#1)";
  cs inline "Math.Cosh(#1)";
  js inline "Math.cosh(#1)";
};
// The hyperbolic sine of `d`
pub extern sinh : (d : std/core/types/float64) -> std/core/types/float64 {
  c inline "sinh(#1)";
  cs inline "Math.Sinh(#1)";
  js inline "Math.sinh(#1)";
};
// Return `ln(1.0 + x)`.
// Avoids potential imprecision for small `x` where adding `1.0` explicitly
// may lead to rounding errors.
pub extern ln1p : (d : std/core/types/float64) -> std/core/types/float64 {
  c inline "log1p(#1)";
  js inline "Math.log1p(#1)";
};
// Return `exp(x - 1.0)`.
// Avoids rounding errors for values of `x` very close to `1.0`.
pub extern expm1 : (d : std/core/types/float64) -> std/core/types/float64 {
  c inline "expm1(#1)";
  js inline "Math.expm1(#1)";
};
 
//------------------------------
//#kki: inline definitions
 
//.inline-section
fun abs-max // inline size: 4
  = fn(x: std/core/types/float64, y: std/core/types/float64){
    val x0.3956 : std/core/types/float64
      = std/core/abs.1(x);
    val y0.3957 : std/core/types/float64
      = std/core/abs.1(y);
    match ((std/core/(>=.3)(x0.3956, y0.3957))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> x0.3956;
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> y0.3957;
    };
  };
fun abs-max.1 // inline size: 4
  = fn(xs: (std/core/list :: V -> V)<std/core/types/float64>){
    std/core/foldl<std/core/types/float64,std/core/types/float64,(std/core/types/(<>) :: E)>(xs, 0.0, (fn(m: std/core/types/float64, x: std/core/types/float64){
        val x0.3958 : std/core/types/float64
              = (std/core/abs.1(x));
        (match ((std/core/(>=.3)(x0.3958, m))) {
          ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
             -> x0.3958;
          ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
             -> m;
        });
      }));
  };
inline val flt-min // inline size: 0
  = 2.2250738585072014e-308;
inline val pi // inline size: 0
  = 3.141592653589793;
inline val one-m1022 // inline size: 0
  = 2.2250738585072014e-308;
inline val one-p1023 // inline size: 0
  = 8.98846567431158e307;
inline val flt-ln2 // inline size: 0
  = 0.6931471805599453;
fun ffraction // inline size: 2
  = fn(d: std/core/types/float64){
    std/core/(-.2)(d, (std/num/float64/floor(d)));
  };
inline val flt-e // inline size: 0
  = 2.718281828459045;
inline val flt-epsilon // inline size: 0
  = 2.220446049250313e-16;
inline val flt-euler // inline size: 0
  = 0.5772156649015329;
inline val flt-ln10 // inline size: 0
  = 2.302585092994046;
inline val flt-log10e // inline size: 0
  = 0.4342944819032518;
inline val flt-log2e // inline size: 0
  = 1.4426950408889634;
inline val flt-max // inline size: 0
  = 1.7976931348623157e308;
inline val flt-max-prec // inline size: 0
  = 15;
inline val flt-pi2 // inline size: 0
  = 1.5707963267948966;
inline val flt-pi34 // inline size: 0
  = 2.356194490192345;
inline val flt-pi4 // inline size: 0
  = 0.7853981633974483;
inline val flt-sqrt12 // inline size: 0
  = 0.7071067811865476;
inline val flt-sqrt2 // inline size: 0
  = 1.4142135623730951;
inline val flt-true-min // inline size: 0
  = 5.0e-324;
inline val flt-twopi // inline size: 0
  = 6.283185307179586;
fun truncate // inline size: 4
  = fn(d: std/core/types/float64){
    match ((std/core/(>=.3)(d, 0.0))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/num/float64/floor(d);
      ((.skip std/core/types/False() : std/core/types/bool ) as .pat0: std/core/types/bool)
         -> std/num/float64/ceiling(d);
    };
  };
fun is-negzero // inline size: 4
  = fn(d: std/core/types/float64){
    match ((std/core/(==.2)(d, 0.0))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/num/float64/is-neginf((std/core/(/.1)(1.0, d)));
      (.pat0: std/core/types/bool)
         -> std/core/types/False;
    };
  };
fun sqr // inline size: 1
  = fn(x: std/core/types/float64){
    std/core/(*.1)(x, x);
  };
fun log // inline size: 3
  = fn(f: std/core/types/float64, base: std/core/types/float64){
    std/core/(/.1)((std/num/float64/ln(f)), (std/num/float64/ln(base)));
  };
fun is-subnormal // inline size: 4
  = fn(d: std/core/types/float64){
    match ((std/core/(!=.2)(d, 0.0))) {
      ((std/core/types/True() : std/core/types/bool ) as .pat: std/core/types/bool)
         -> std/core/(<.4)((std/core/abs.1(d)), 2.2250738585072014e-308);
      (.pat0: std/core/types/bool)
         -> std/core/types/False;
    };
  };
fun deg // inline size: 1
  = fn(rad0: std/core/types/float64){
    std/core/(*.1)(rad0, std/num/float64/rad2deg);
  };
fun mul-exp2 // inline size: 2
  = fn(x: std/core/types/float64, e: std/core/types/int){
    std/core/(*.1)(x, (std/num/float64/exp2.1(e)));
  };
fun encode // inline size: 2
  = fn(man: std/core/types/int, exp: std/core/types/int){
    std/num/float64/ldexp((std/core/float64(man)), exp);
  };
fun exp2m1 // inline size: 2
  = fn(x: std/core/types/float64){
    std/num/float64/expm1((std/core/(*.1)(0.6931471805599453, x)));
  };
fun f32 // inline size: 1
  = fn(f: std/core/types/float64){
    std/num/float64/float32(f);
  };
inline val flt-pi // inline size: 0
  = 3.141592653589793;
fun log2p1 // inline size: 2
  = fn(x: std/core/types/float64){
    std/core/(*.1)(1.4426950408889634, (std/num/float64/ln1p(x)));
  };
fun rad // inline size: 1
  = fn(deg0: std/core/types/float64){
    std/core/(*.1)(deg0, std/num/float64/deg2rad);
  };
fun (~=) // inline size: 1
  = fn(x: std/core/types/float64, y: std/core/types/float64){
    std/num/float64/nearly-eq(x, y, (std/core/types/None<std/core/types/float64>));
  };